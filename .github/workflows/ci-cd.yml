name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: v2.1.4

    - name: Cache Deno dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cache/deno/deps
          ~/.cache/deno/gen
        key: ${{ runner.os }}-deno-${{ hashFiles('deno.json', 'deno.lock') }}
        restore-keys: |
          ${{ runner.os }}-deno-

    - name: Check TypeScript
      run: deno task check

    - name: Lint code
      run: deno task lint

    - name: Check formatting
      run: deno task fmt:check

    - name: Run integration tests
      run: deno task test:integration
      env:
        LDAPTOID_IDP_TYPE: zitadel
        LDAPTOID_IDP_BASE_URL: https://test.zitadel.cloud
        LDAPTOID_IDP_CLIENT_ID: test-client
        LDAPTOID_IDP_CLIENT_SECRET: test-secret

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'

  # Build and Test Docker Image
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [quality, security]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v6
      with:
        context: .
        target: production
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Run container security scan
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
        format: 'table'
        exit-code: '1'
        ignore-unfixed: true
        severity: 'CRITICAL,HIGH'
      if: github.event_name != 'pull_request'

  # Integration Testing with Docker Compose
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name != 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Create test environment file
      run: |
        cat > .env << EOF
        LDAPTOID_IDP_TYPE=zitadel
        LDAPTOID_IDP_BASE_URL=https://test.zitadel.cloud
        LDAPTOID_IDP_CLIENT_ID=test-client
        LDAPTOID_IDP_CLIENT_SECRET=test-secret
        LDAPTOID_LDAP_BASE_DN=dc=test,dc=local
        LDAPTOID_REDIS_ENABLED=true
        REDIS_PASSWORD=test-password
        GRAFANA_PASSWORD=test-password
        EOF

    - name: Run Docker Compose stack
      run: |
        docker-compose up -d --wait
        docker-compose ps

    - name: Wait for services to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:8080/ready; do sleep 2; done'
        timeout 60 bash -c 'until curl -f http://localhost:9090/metrics; do sleep 2; done'

    - name: Test LDAP connectivity
      run: |
        # Test if LDAP port is accessible
        timeout 10 bash -c 'until nc -z localhost 389; do sleep 1; done'

    - name: Test health endpoints
      run: |
        curl -f http://localhost:8080/health
        curl -f http://localhost:8080/ready
        curl -f http://localhost:8080/live

    - name: Test metrics endpoint
      run: |
        curl -f http://localhost:9090/metrics | grep -q "ldaptoid_"

    - name: Check Redis connectivity
      run: |
        docker-compose exec -T redis redis-cli -a test-password ping

    - name: Cleanup
      if: always()
      run: |
        docker-compose logs
        docker-compose down -v

  # Release Creation
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [quality, security, docker, integration]
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Deno
      uses: denoland/setup-deno@v2
      with:
        deno-version: v2.1.4

    - name: Build binary for Linux
      run: |
        deno task build
        tar -czf ldaptoid-linux-x64.tar.gz bin/ldaptoid

    - name: Build binary for Linux ARM64
      run: |
        deno compile --allow-net --allow-env --target aarch64-unknown-linux-gnu --output bin/ldaptoid-arm64 src/cli/main.ts
        tar -czf ldaptoid-linux-arm64.tar.gz bin/ldaptoid-arm64

    - name: Create Release
      uses: softprops/action-gh-release@v2
      with:
        files: |
          ldaptoid-linux-x64.tar.gz
          ldaptoid-linux-arm64.tar.gz
        generate_release_notes: true
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}