version: "3.8"

services:
  # LDAP-to-ID Proxy
  ldaptoid:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: ldaptoid
    restart: unless-stopped
    ports:
      - "389:389" # LDAP port
      - "8080:8080" # Health check port
      - "9090:9090" # Metrics port
    environment:
      # Required IdP configuration
      LDAPTOID_IDP_TYPE: ${LDAPTOID_IDP_TYPE}
      LDAPTOID_IDP_BASE_URL: ${LDAPTOID_IDP_BASE_URL}
      LDAPTOID_IDP_CLIENT_ID: ${LDAPTOID_IDP_CLIENT_ID}
      LDAPTOID_IDP_CLIENT_SECRET: ${LDAPTOID_IDP_CLIENT_SECRET}

      # IdP-specific configuration
      LDAPTOID_IDP_REALM: ${LDAPTOID_IDP_REALM:-}
      LDAPTOID_IDP_TENANT: ${LDAPTOID_IDP_TENANT:-}
      LDAPTOID_IDP_ORGANIZATION: ${LDAPTOID_IDP_ORGANIZATION:-}

      # LDAP configuration
      LDAPTOID_LDAP_BASE_DN: ${LDAPTOID_LDAP_BASE_DN:-dc=company,dc=com}
      LDAPTOID_LDAP_BIND_DN: ${LDAPTOID_LDAP_BIND_DN:-}
      LDAPTOID_LDAP_BIND_PASSWORD: ${LDAPTOID_LDAP_BIND_PASSWORD:-}
      LDAPTOID_ALLOW_ANONYMOUS_BIND: ${LDAPTOID_ALLOW_ANONYMOUS_BIND:-true}

      # Redis configuration
      LDAPTOID_REDIS_ENABLED: "true"
      LDAPTOID_REDIS_HOST: "redis"
      LDAPTOID_REDIS_PORT: "6379"
      LDAPTOID_REDIS_PASSWORD: ${REDIS_PASSWORD:-}
      LDAPTOID_REDIS_DATABASE: "0"

      # Feature flags
      LDAPTOID_ENABLED_FEATURES: ${LDAPTOID_ENABLED_FEATURES:-synthetic_primary_group}

      # Operational settings
      LDAPTOID_VERBOSE: ${LDAPTOID_VERBOSE:-false}
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ldaptoid-network
    healthcheck:
      test: ["CMD", "/usr/local/bin/ldaptoid", "--help"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Redis for UID/GID mapping persistence
  redis:
    image: redis:7.4-alpine
    container_name: ldaptoid-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    command: >
      redis-server
      --requirepass "${REDIS_PASSWORD:-}"
      --appendonly yes
      --appendfsync everysec
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - ldaptoid-network
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD:-}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:v2.54.1
    container_name: ldaptoid-prometheus
    restart: unless-stopped
    ports:
      - "9091:9090"
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=15d"
      - "--web.enable-lifecycle"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    networks:
      - ldaptoid-network
    depends_on:
      - ldaptoid

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:11.2.2
    container_name: ldaptoid-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "redis-datasource"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - ldaptoid-network
    depends_on:
      - prometheus

  # Redis Exporter for Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:v1.62.0
    container_name: ldaptoid-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-}
    networks:
      - ldaptoid-network
    depends_on:
      redis:
        condition: service_healthy

volumes:
  redis-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

networks:
  ldaptoid-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
